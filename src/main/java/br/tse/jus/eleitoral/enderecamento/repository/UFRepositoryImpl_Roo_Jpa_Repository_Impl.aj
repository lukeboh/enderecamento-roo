// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.tse.jus.eleitoral.enderecamento.repository;

import br.tse.jus.eleitoral.enderecamento.dominio.QUF;
import br.tse.jus.eleitoral.enderecamento.dominio.UF;
import br.tse.jus.eleitoral.enderecamento.repository.UFRepositoryCustom;
import br.tse.jus.eleitoral.enderecamento.repository.UFRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UFRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: UFRepositoryImpl implements UFRepositoryCustom;
    
    declare @type: UFRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UFRepositoryImpl.SIGLA = "sigla";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UFRepositoryImpl.NOME = "nome";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<UF> UFRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QUF uF = QUF.uF;
        
        JPQLQuery<UF> query = from(uF);
        
        Path<?>[] paths = new Path<?>[] {uF.sigla,uF.nome};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SIGLA, uF.sigla)
			.map(NOME, uF.nome);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, uF);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<UF> UFRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QUF uF = QUF.uF;
        
        JPQLQuery<UF> query = from(uF);
        
        Path<?>[] paths = new Path<?>[] {uF.sigla,uF.nome};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(uF.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SIGLA, uF.sigla)
			.map(NOME, uF.nome);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, uF);
    }
    
}
